/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package strings_kotlin

fun explainingStrings() {
    val str = "This is an example"
    val int = 4

    /*CHECK LENGTH AND INDICES*/

    println(str.length) // result -> 18

    // Returns the length of this char sequence
    println(str.count()) // result -> 18

    // Returns the range of valid character indices for this char sequence
    println(str.indices) // result -> 0..17

    // Returns the index of the last character in the char sequence or -1 if it is empty
    println(str.lastIndex) // result -> 17


    /*CONVERT TO UPPERCASE, LOWERCASE AND CAPITALIZE*/

    // Returns a copy of the string converted to lower case using the rules of the specified locale
    println(str.lowercase()) // result -> this is an example

    // Returns a copy of this string converted to upper case using the rules of the specified locale
    println(str.uppercase()) // result -> THIS IS AN EXAMPLE

    /*Returns a copy of this string having its first letter titlecased using the rules of the specified
    locale, or the original string if it's empty or already starts with a title case letter.*/
    println(str.capitalize()) // result -> This is an example


    /*CONVERT TO STRING AND ADD TWO STRINGS*/

    // Returns a string representation of the object
    println(int.toString()) // result -> 4

    // Returns a string obtained by concatenating this string with the string representation of the given other object
    println(str.plus(" of Kotlin")) // result -> This is an example of Kotlin


    /*REMOVE CHARACTERS*/

    // Returns a string with the first n characters removed
    println(str.drop(5)) // result -> is an example

    // Removes the part of a string at a given range
    println(str.removeRange(0, 5)) // result -> is an example
    println(str.removePrefix("This ")) // result -> is an example
    println(str.removeSuffix(" example")) // result -> This is an
    println(str.removeSurrounding("This ", " example")) // result -> is an


    /*START WITH, END WITH, NOT EMPTY*/

    // Returns true if the char sequence starts with the specified character
    println(str.startsWith("This")) // result -> true

    // Returns true if this char sequence ends with the specified character
    println(str.endsWith("ple")) // result -> true

    // Returns true if the char sequence has no characters
    println(str.none()) // result -> false


    /*CHECK CHARACTERS INSIDE THE STRING*/

    // Returns the first character
    println(str.first()) // result -> T

    // Returns the last character
    println(str.last()) // result -> e

    // Returns the single character, or throws an exception if the char sequence is empty or has more than one character
    println(str.single()) // result -> throws an exception


    /*REVERSE A STRING*/

    // Returns a string with characters in reversed order
    println(str.reversed()) // result -> elpmaxe na si sihT


    /*SPLIT A STRING*/

    // Splits this char sequence to a list of strings around occurrences of the specified delimiters
    println(str.split(" ")) // result -> [This, is, an, example]

    // Splits this char sequence into a list of strings each not exceeding the given size
    println(str.chunked(4)) // result -> [This,  is , an e, xamp, le]

    // Returns a substring specified by the given range of indices
    println(str.substring(2, 4)) // result -> is

    // Returns a string containing the first n characters from this string, or the entire string if this string is shorter
    println(str.take(4)) // result -> This


    /*MISCELLANEOUS*/

    // Returns the ASCII code for the character at the specified index
    println(str.codePointAt(0)) // result -> 84

    // Returns true if this char sequence contains the specified other sequence of characters as a substring
    println(str.contains("is")) // result -> true

    // Returns a random character from this char sequence
    println(str.random()) // result -> random char each time

}


fun main() {
    explainingStrings()
}


